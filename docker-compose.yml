version: '3.8'

services:
  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart_trading_bot
    restart: unless-stopped
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINARIUM_PARTNER_ID=${BINARIUM_PARTNER_ID}
      - POCKET_OPTION_AFFILIATE_ID=${POCKET_OPTION_AFFILIATE_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
    networks:
      - trading_bot_network

  # Web Admin Panel
  web_panel:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: smart_trading_web
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_bot
      - WEB_PANEL_SECRET_KEY=${WEB_PANEL_SECRET_KEY}
      - WEB_PANEL_USERNAME=${WEB_PANEL_USERNAME}
      - WEB_PANEL_PASSWORD=${WEB_PANEL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - trading_bot_network

  # REST API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: smart_trading_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_bot
      - API_SECRET_KEY=${API_SECRET_KEY}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - trading_bot_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smart_trading_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_bot_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smart_trading_cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - trading_bot_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smart_trading_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web_panel
      - api
    networks:
      - trading_bot_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smart_trading_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - trading_bot_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: smart_trading_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - trading_bot_network

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: smart_trading_backup
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_bot
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - ./backups:/app/backups
      - postgres_data:/var/lib/postgresql/data:ro
    depends_on:
      - postgres
    networks:
      - trading_bot_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading_bot_network:
    driver: bridge