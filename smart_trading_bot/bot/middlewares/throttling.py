"""
Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (throttling)
"""
from telegram import Update
from telegram.ext import ContextTypes
import time
from collections import defaultdict
import logging

logger = logging.getLogger(__name__)

class ThrottlingMiddleware:
    def __init__(self, rate_limit: int = 30, time_window: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            rate_limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            time_window: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.rate_limit = rate_limit
        self.time_window = time_window
        self.user_requests = defaultdict(list)

    async def check_rate_limit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        """
        if not update.effective_user:
            return True
        
        user_id = update.effective_user.id
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if current_time - req_time < self.time_window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.rate_limit:
            logger.warning(f"Rate limit exceeded for user {user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if update.message:
                await update.message.reply_text(
                    "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
                )
            elif update.callback_query:
                await update.callback_query.answer(
                    "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                    show_alert=True
                )
            
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.user_requests[user_id].append(current_time)
        return True

    async def check_spam(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è)
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º, False –µ—Å–ª–∏ —Å–ø–∞–º
        """
        if not update.effective_user or not update.message:
            return True
        
        user_id = update.effective_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = context.user_data.get('recent_messages', [])
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥)
        user_messages = [
            (msg_time, msg_text) for msg_time, msg_text in user_messages
            if current_time - msg_time < 10
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = update.message.text or ""
        user_messages.append((current_time, message_text))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        context.user_data['recent_messages'] = user_messages
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if len(user_messages) >= 5:  # 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 10 —Å–µ–∫—É–Ω–¥
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            recent_texts = [msg_text for _, msg_text in user_messages[-5:]]
            if len(set(recent_texts)) <= 2:  # –ú–∞–∫—Å–∏–º—É–º 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.warning(f"Spam detected from user {user_id}")
                await update.message.reply_text(
                    "üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
                return False
        
        return True

    async def check_flood(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥ (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥)
        
        Returns:
            True –µ—Å–ª–∏ —Ñ–ª—É–¥–∞ –Ω–µ—Ç, False –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥
        """
        if not update.effective_user:
            return True
        
        user_id = update.effective_user.id
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time = context.user_data.get('last_message_time', 0)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
        if current_time - last_message_time < 1:  # –ú–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            flood_count = context.user_data.get('flood_count', 0) + 1
            context.user_data['flood_count'] = flood_count
            
            if flood_count >= 5:  # 5 –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
                logger.warning(f"Flood detected from user {user_id}")
                
                if update.message:
                    await update.message.reply_text(
                        "üåä –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ."
                    )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                context.user_data['flood_count'] = 0
                return False
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            context.user_data['flood_count'] = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['last_message_time'] = current_time
        return True

    async def process_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if not await self.check_rate_limit(update, context):
            return False
        
        if not await self.check_spam(update, context):
            return False
        
        if not await self.check_flood(update, context):
            return False
        
        return True

