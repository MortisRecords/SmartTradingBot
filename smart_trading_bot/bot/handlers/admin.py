"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from database.manager import DatabaseManager
from bot.utils.texts import TEXTS
from config import config
import logging

logger = logging.getLogger(__name__)

class AdminHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in config.ADMIN_IDS or user_id == config.SUPER_ADMIN_ID

    async def admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üì° –°–∏–≥–Ω–∞–ª—ã", callback_data="admin_signals")],
            [InlineKeyboardButton("üí∞ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = TEXTS['admin_menu']
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        stats = await self.db.get_bot_statistics()
        
        text = TEXTS['admin_stats'].format(
            total_users=stats.get('total_users', 0),
            active_users=stats.get('active_users', 0),
            total_signals=stats.get('total_signals', 0),
            successful_signals=stats.get('successful_signals', 0),
            total_commissions=stats.get('total_commissions', 0),
            pending_payouts=stats.get('pending_payouts', 0)
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def manage_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        users = await self.db.get_recent_users(limit=10)
        
        text = TEXTS['admin_users_header']
        for user in users:
            status = "üü¢" if user['is_active'] else "üî¥"
            text += f"\n{status} {user['username']} (ID: {user['user_id']})"
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton("üìä –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_top_referrers")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def manage_signals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
        signals = await self.db.get_recent_signals(limit=5)
        
        text = TEXTS['admin_signals_header']
        for signal in signals:
            status_emoji = "‚úÖ" if signal['result'] == 'win' else "‚ùå" if signal['result'] == 'loss' else "‚è≥"
            text += f"\n{status_emoji} {signal['symbol']} {signal['direction']} - {signal['created_at']}"
        
        keyboard = [
            [InlineKeyboardButton("üì° –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="admin_send_signal")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="admin_signal_stats")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        text = TEXTS['admin_broadcast_menu']
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("üéØ –ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_active")],
            [InlineKeyboardButton("üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_premium")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def start_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        broadcast_type = update.callback_query.data.split('_')[1]
        context.user_data['broadcast_type'] = broadcast_type
        
        await update.callback_query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
            ]])
        )

    async def process_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if 'broadcast_type' not in context.user_data:
            return
        
        broadcast_type = context.user_data['broadcast_type']
        message_text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if broadcast_type == 'all':
            users = await self.db.get_all_users()
        elif broadcast_type == 'active':
            users = await self.db.get_active_users()
        elif broadcast_type == 'premium':
            users = await self.db.get_premium_users()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        sent_count = 0
        for user in users:
            try:
                await context.bot.send_message(user['user_id'], message_text)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –∏–∑ {len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
        
        del context.user_data['broadcast_type']

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return [
            CommandHandler("admin", self.admin_menu),
            CallbackQueryHandler(self.admin_menu, pattern="^admin_menu$"),
            CallbackQueryHandler(self.show_stats, pattern="^admin_stats$"),
            CallbackQueryHandler(self.manage_users, pattern="^admin_users$"),
            CallbackQueryHandler(self.manage_signals, pattern="^admin_signals$"),
            CallbackQueryHandler(self.broadcast_menu, pattern="^admin_broadcast$"),
            CallbackQueryHandler(self.start_broadcast, pattern="^broadcast_"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_broadcast_message),
        ]

