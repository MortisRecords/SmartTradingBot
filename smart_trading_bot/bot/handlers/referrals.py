"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from database.manager import DatabaseManager
from bot.utils.texts import TEXTS
import logging

logger = logging.getLogger(__name__)

class ReferralHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def referral_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await self.db.get_user_referral_stats(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ref_stats")],
            [InlineKeyboardButton("üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="ref_list")],
            [InlineKeyboardButton("üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="ref_withdraw")],
            [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="ref_link")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = TEXTS['referral_menu'].format(
            referrals_count=user_stats.get('referrals_count', 0),
            total_earned=user_stats.get('total_earned', 0),
            available_balance=user_stats.get('available_balance', 0)
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

    async def show_referral_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        stats = await self.db.get_detailed_referral_stats(user_id)
        
        text = TEXTS['referral_stats'].format(**stats)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="referrals")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def show_referral_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        referrals = await self.db.get_user_referrals(user_id)
        
        if not referrals:
            text = TEXTS['no_referrals']
        else:
            text = TEXTS['referral_list_header']
            for ref in referrals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                text += f"\nüë§ {ref['username']} - {ref['earned']}$"
            
            if len(referrals) > 10:
                text += f"\n\n... –∏ –µ—â–µ {len(referrals) - 10} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="referrals")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def show_referral_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
        user_id = update.effective_user.id
        bot_username = context.bot.username
        
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        text = TEXTS['referral_link'].format(link=referral_link)
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", url=referral_link)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="referrals")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def withdraw_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
        user_id = update.effective_user.id
        balance = await self.db.get_user_balance(user_id)
        
        if balance < 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            text = TEXTS['withdraw_min_amount'].format(balance=balance, min_amount=50)
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="referrals")]]
        else:
            text = TEXTS['withdraw_menu'].format(balance=balance)
            keyboard = [
                [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="withdraw_card")],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="withdraw_crypto")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="referrals")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return [
            CommandHandler("referrals", self.referral_menu),
            CallbackQueryHandler(self.referral_menu, pattern="^referrals$"),
            CallbackQueryHandler(self.show_referral_stats, pattern="^ref_stats$"),
            CallbackQueryHandler(self.show_referral_list, pattern="^ref_list$"),
            CallbackQueryHandler(self.show_referral_link, pattern="^ref_link$"),
            CallbackQueryHandler(self.withdraw_menu, pattern="^ref_withdraw$"),
        ]

