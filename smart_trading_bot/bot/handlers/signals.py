"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from analytics.signal_generator import SignalGenerator
from bot.keyboards.inline import get_signal_keyboard, get_platforms_keyboard
from bot.utils.texts import format_signal_message, NO_SIGNALS_TEXT
from database.models import Signal
from config import config
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class SignalHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, db_manager):
        self.db = db_manager
        self.signal_generator = SignalGenerator()
    
    async def get_signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user = await self.db.get_user(user_id)
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not user.is_premium:
                daily_signals = await self.db.get_user_daily_signals_count(user_id)
                if daily_signals >= config.FREE_SIGNALS_PER_DAY:
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å Premium", callback_data="upgrade_premium")
                    ]])
                    await update.message.reply_text(
                        "üìä –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
                        "üíé –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!",
                        reply_markup=keyboard
                    )
                    return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            await self._send_signal(update, context, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_signal_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")
    
    async def _send_signal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            signal_data = await self.signal_generator.generate_signal()
            
            if not signal_data:
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_signal")
                ]])
                await update.message.reply_text(
                    NO_SIGNALS_TEXT,
                    reply_markup=keyboard
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î
            signal = Signal(
                user_id=user_id,
                symbol=signal_data['symbol'],
                signal_type=signal_data['signal_type'],
                entry_price=signal_data['entry_price'],
                take_profit=signal_data.get('take_profit'),
                stop_loss=signal_data.get('stop_loss'),
                confidence=signal_data['confidence'],
                timeframe=signal_data['timeframe'],
                analysis=signal_data.get('analysis', {}),
                expires_at=signal_data.get('expires_at')
            )
            
            signal_id = await self.db.save_signal(signal)
            signal_data['signal_id'] = signal_id
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = format_signal_message(signal_data)
            keyboard = get_signal_keyboard(signal_id)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.increment_user_signals_count(user_id)
            
            logger.info(f"–°–∏–≥–Ω–∞–ª {signal_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")
    
    async def get_detailed_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE, signal_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            signal = await self.db.get_signal(signal_id)
            if not signal:
                await update.callback_query.answer("–°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            user = await self.db.get_user(update.effective_user.id)
            if not user or not user.is_premium:
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å Premium", callback_data="upgrade_premium")
                ]])
                await update.callback_query.edit_message_text(
                    "üîê –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                    reply_markup=keyboard
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis = await self.signal_generator.get_detailed_analysis(signal.symbol)
            
            analysis_text = f"""
üîç <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó</b>

üìä <b>–°–∏–º–≤–æ–ª:</b> {signal.symbol}
üéØ <b>–°–∏–≥–Ω–∞–ª:</b> {signal.signal_type}
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${signal.entry_price:.4f}

<b>üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ RSI: {analysis.get('rsi', 'N/A'):.2f}
‚Ä¢ MACD: {analysis.get('macd_signal', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ')}
‚Ä¢ Moving Average: {analysis.get('ma_signal', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ')}
‚Ä¢ Volume: {analysis.get('volume_analysis', '–°—Ä–µ–¥–Ω–∏–π')}
‚Ä¢ Smart Money: {analysis.get('smart_money_flow', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')}

<b>üéØ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${analysis.get('support_level', 0):.4f}
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${analysis.get('resistance_level', 0):.4f}

<b>üìä –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>
‚Ä¢ –¢—Ä–µ–Ω–¥: {analysis.get('trend', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis.get('volatility', '–°—Ä–µ–¥–Ω—è—è')}
‚Ä¢ –û–±—ä–µ–º: {analysis.get('volume_condition', '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π')}

‚ö†Ô∏è <i>–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä</i>
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –¢–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="show_platforms")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_signal")]
            ])
            
            await update.callback_query.edit_message_text(
                text=analysis_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞", show_alert=True)
    
    async def show_platforms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            user_id = update.effective_user.id
            keyboard = get_platforms_keyboard(user_id)
            
            platforms_text = """
üè¢ <b>–¢–û–†–ì–û–í–´–ï –ü–õ–ê–¢–§–û–†–ú–´</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:

üî∏ <b>Binarium</b>
‚Ä¢ –ë–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω—ã
‚Ä¢ –ë–æ–Ω—É—Å –¥–æ 100% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç  
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –¥–æ 90%
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $10

üî∏ <b>PocketOption</b>
‚Ä¢ CFD –∏ –æ–ø—Ü–∏–æ–Ω—ã
‚Ä¢ –î–µ–º–æ-—Å—á–µ—Ç $10,000
‚Ä¢ –¢—É—Ä–Ω–∏—Ä—ã —Å –ø—Ä–∏–∑–∞–º–∏
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $5

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–æ—Ä–≥–æ–≤–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–∞–º–∏. 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ—Ç–µ—Ä—é –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å.

üí∞ <b>–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç!</b>
            """
            
            await update.callback_query.edit_message_text(
                text=platforms_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    async def track_signal_result(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                signal_id: int, result: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            await self.db.update_signal_result(signal_id, result)
            
            result_emoji = "‚úÖ" if result == "win" else "‚ùå" if result == "loss" else "‚ö™Ô∏è"
            result_text = "–ü—Ä–∏–±—ã–ª—å" if result == "win" else "–£–±—ã—Ç–æ–∫" if result == "loss" else "–ë–µ–∑—É–±—ã—Ç–æ–∫"
            
            await update.callback_query.answer(
                f"{result_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω: {result_text}",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
            await self.db.update_signal_accuracy_stats()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", show_alert=True)